Comparator
================================================
var comparator = new ObjectComparator<Type>();
comparator.Log.IntoConsole();
comparator.Log.Callback(Context with a message);	// Both prop infos, both values and a string message
comparator.Property(x => PropA.PropB.PropC).Ignore();
comparator.Property(x => PropA.PropB.PropC).CustomCompare((exp, act) => exp.GetHashCode() == exp.GetHashCode());
comparator.PropertiesOfType(Predicate).Ignore();
comparator.PropertiesMatching(Predicate).???;

comparator.Compare(expected, actual);




Generator
================================================
- Same API as the comparator, just actions would be different?
- The selection could be abstracted into a PropertySelector fluent interface